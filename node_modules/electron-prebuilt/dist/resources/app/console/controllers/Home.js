var Home = (function() {
  var Home = {
    view: function(ctrl, args) {
      var classroom = args.classroom();
      var w = classroom.dimensions.width,
          h = classroom.dimensions.height,
          accentWall = classroom.accentWall;

      var wallDir = ['top', 'right', 'bottom', 'left'];
      var wallStyle = 'border-' + wallDir[accentWall.location - 1] + ': 5px solid ' + accentWall.color + ';';

      return (
        m('div', [
          m('div.row', [
            m('div.panel.panel-default#device-well', {
                'style': wallStyle + 'width: ' + 60 + 'vw;' + 'height: ' + (h / w) * 60 + 'vw;'
              }, [
                classroom.devices.map(function(device, index) {
                  return m.component(DeviceView, {'device': device, 'index': index, 'classroomDimensions': classroom.dimensions});
                })
              ]
            )
          ]),
          m.component(AppDock)
        ])
      );
    }
  };

  var AppDock = {
    'controller': function(args) {
      return {
        'apps': m.request({'method': 'GET', 'url': '/api/apps'})
      };
    },
    'view': function(ctrl) {
      return (
        m('div#dock-container', [
          m('div#dock', [
            m('ul', ctrl.apps().map(function(app, index) {
              return (
                m('li', [
                  m('span', [app.title]),
                  m('div', [
                    m('img.docked.appIcon', {'src': '/apps/' + app.path + '/' + app.icon, 'data-path': app.path})
                  ])
                ])
              );
            })),
            m('div.base')
          ])
        ])
      );
    }
  };

  var DeviceView = {
    view: function(ctrl, args) {
      var x = args.device.location.x / 100 * (60 / 100 * document.documentElement.clientWidth),
        y = args.device.location.y / 100 * ((args.classroomDimensions.height / args.classroomDimensions.width * 60) / 100 * document.documentElement.clientWidth);

      return (
        m('div.deviceTile' + (args.device.connected ? '.deviceActive' : ''), {
          'data-index': args.index,
          'style': 'position: absolute; webkit-transform: translate(' + x + 'px, ' + y + 'px); transform: translate(' + x + 'px, ' + y + 'px);',
          'data-x': x,
          'data-y': y,
          'onmouseup': function(e) {
            if (typeof e.target.parentNode.dataset.x === 'undefined')
              return;

            args.device.location().x(Math.round(100 * 100 * e.target.parentNode.dataset.x / (60 * document.documentElement.clientWidth)));
            args.device.location().y(Math.round(100 * 100 * e.target.parentNode.dataset.y / ((args.classroomDimensions().height() / args.classroomDimensions().width() * 60) * document.documentElement.clientWidth)));
            }
          }, [
          m('div.panel.panel-default.resizeTile', {
            'style':
              'background-color: ' + (args.device.connected ? args.device.color : 'gray') + ';' +
              'width: ' + args.device.screen.width + 'vw;' +
              'height: ' + args.device.screen.height + 'vw;',
            'onmouseup': function(e) {
              args.device.screen.width(parseInt(e.target.style.width.replace('vw', '')));
              args.device.screen.height(parseInt(e.target.style.height.replace('vw', '')));
            }
          }),
          m('div.deviceName', args.device.name)
        ])
      );
    }
  };

  return Home;
}());
