if (!Object.assign) {
  Object.defineProperty(Object, 'assign', {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target, firstSource) {
      'use strict';
      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert first argument to object');
      }

      var to = Object(target);
      for (var i = 1; i < arguments.length; i++) {
        var nextSource = arguments[i];
        if (nextSource === undefined || nextSource === null) {
          continue;
        }
        nextSource = Object(nextSource);

        var keysArray = Object.keys(Object(nextSource));
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
      return to;
    }
  });
}

var state = (function() {
  function state(data) {
    this.data = {};

    for (var prop in data)
      if (data.hasOwnProperty(prop))
        this.data[prop] = data[prop];
  }

  function diffableState(data) {
    this.data = {};
    this.diff = {};
    this.patch = {};

    var get = function(prop) {
      return function() {
        if (this.data[prop] instanceof diffableState && typeof this.diff[prop] === 'undefined')
        {
          this.diff[prop] = this.data[prop].diff;
          this.patch[prop] = this.data[prop].patch;
        }
        else
        {
          this.diff[prop] = data[prop];
        }

        return (prop in this.data ? this.data[prop] : data[prop]);
      };
    };

    var set = function(prop) {
      return function(value) {
        var mark = this[prop];
        return (this.patch[prop] = value);
      };
    };

    for (var prop in data)
    {
      if (data.hasOwnProperty(prop))
      {
        Object.defineProperty(this, prop, {
          'get': get(prop),
          'set': set(prop)
        });

        if (data[prop] !== null && typeof data[prop] == 'object' && !(data[prop] instanceof diffableState))
          this.data[prop] = new diffableState(data[prop]);
      }
    }
  }

  state.prototype.use = function(callback) {
    var d = new diffableState(this.data);
    callback(d);
    console.log(d);
    Object.assign(this.data, d.patch);
  };

  return state;
}());
