function DiffableStateFactory(root, prop, data) {

  function State(newValorProp, newVal) {
    if (!State.$$.patched && arguments.length < 2) {
      State.$$.root.$$.diff[State.$$.prop] = State.$$.data;
      State.$$.root.$$.propegateDiff();
    }

    if (arguments.length === 0) {
      if (typeof State.$$.data !== 'object')
        return State.$$.data;

      return State.$$.merge();
    }

    if (arguments.length === 1) {
      State.$$.patched = true;
      State.$$.root.$$.propegatePatch();

      State.$$.root[State.$$.prop] = DiffableStateFactory(State.$$.root, State.$$.prop, newValorProp);
      State.$$.root[State.$$.prop].$$.patched = true;
      return (State.$$.root.$$.patch[State.$$.prop] = newValorProp);
    }

    if (arguments.length === 2) {
      if (newValorProp in State.$$.data)
        State[newValorProp](newVal);
      else {
        State.$$.data[newValorProp] = newVal;
        State[newValorProp] = DiffableStateFactory(State, newValorProp, undefined);
        State[newValorProp](newVal);
      }
    }
  }

  State.$$ = {};

  State.$$.root = (root === null ? DiffableStateFactory({}, null, null) : root);
  State.$$.prop = prop;
  State.$$.data = data;

  State.$$.diff = {};
  State.$$.patch = {};
  State.$$.patched = false;

  State.$$.propegateDiff = function() {
      if (State.$$.prop !== null) {
        State.$$.root.$$.diff[State.$$.prop] = State.$$.diff;
        State.$$.root.$$.propegateDiff();
      }
  };

  State.$$.propegatePatch = function() {
    if (State.$$.prop !== null) {
      State.$$.root.$$.patch[State.$$.prop] = State.$$.patch;
      State.$$.root.$$.propegatePatch();
    }
  };

  State.$$.branch = function() {
    return DiffableStateFactory(null, 'root', State.$$.merge());
  };

  State.$$.merge = function() {
    var merge = {};

    for (var _prop in State.$$.data) {
      if (typeof State.$$.root.$$.patch[prop] !== 'undefined' && _prop in State.$$.root.$$.patch[prop])
        merge[_prop] = State.$$.root.$$.patch[prop][_prop];
      else
        merge[_prop] = State.$$.data[_prop];
    }

    return merge;
  };

  if (typeof data === "object")
    for (var _prop in data)
      if (data.hasOwnProperty(_prop))
        State[_prop] = DiffableStateFactory(State, _prop, data[_prop]);

  return State;
}

function Attempt(state, callback) {
  this.state = state;
  this.callback = callback;
  this.valid = false;

  callback(state);
}

Attempt.prototype.toJSON = function() {
  return {'id': this.id, 'diff': this.state.$$.diff, 'patch': this.state.$$.patch};
};

function SharedTransactionalMemory(data, conn) {
  var attempts = [];
  var transactionId = 0;

  function sendObj(channel, message) {
    conn.send(JSON.stringify({'channel': channel, 'message': message}));
  }

  var actionHandler = {
    'data-attempts-returned': function(message) {
      message.attempts.forEach(function(attempt) {

      });
    },
    'data-update-state': function(message) {
      data = message.data;
    }
  };

  var savedWsHandler = conn.onmessage;
  conn.onmessage = function(json) {
    var envelope = JSON.parse(json.data);

    if (envelope.channel in actionHandler)
      actionHandler[envelope.channel](envelope.message);

    savedWsHandler(json);
  };

  this.try = function(callback) {
    var attemptState;

    if (attempts.length > 0)
      attemptState = attempts[attempts.length - 1].state.$$.branch();
    else
      attemptState = DiffableStateFactory(null, "root", data);

    attempts.push(new Attempt(attemptState, callback));
  };

  this.sync = function(timeout) {
    if (arguments.length === 0) {
      var tryableAttempts = [];
      attempts.forEach(function(attempt) {
        var hasPatches = false;
        for (var prop in attempt.state.$$.patch) {
          hasPatches = true;
          break;
        }

        if (!hasPatches) {
          attempt.valid = true;
          return;
        }

        attempt.id = transactionId++;
        tryableAttempts.push(attempt);
      });

      if (tryableAttempts.length > 0)
        sendObj('data-attempt-state', tryableAttempts);
    }
  };
}
