(function() {

  var fs = require('fs');
  var path = require('path');

  var express = require('express'),
    http = express();

  // Takes POST bodies and converts them to JSON.
  var bodyParser = require('body-parser');
  http.use(bodyParser.json());

  // Set Last-Modified to avoid 304 Not Modified statuses
  http.get('/*', function(req, res, next) {
    res.setHeader('Last-Modified', (new Date()).toUTCString());
    next();
  });

  var router = express.Router();
  http.use('/api', router);

  // TODO: add more robust apps functionality (long-term)
  router.route('/apps')
    .get(function(req, res) {
      fs.readdir(path.resolve(__dirname, 'apps'), function(err, files) {
        res.json(
          files
            .filter(function(maybeDir) {
              return fs.statSync(path.resolve(__dirname, 'apps', maybeDir)).isDirectory();
            })
            .map(function(dir) {
              var toReturn = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'apps', dir, 'package.json')));
              toReturn.path = dir;
              return toReturn;
            })
        );
      });
    });

  router.route('/classroom')
    .get(function(req, res) {
      db.find({}, function(err, docs) {
        if (type(err) == type.null)
          res.json(docs.map(function(doc) {
            return {
              '_id': doc._id,
              'name': doc.name,
              'connectedDevices': typeof doc.devices !== 'undefined' ?
                doc.devices.filter(function(dev) {
                  return dev.connected;
                }).length : 0
            };
          }));
        else
          res.status(500).json(err);
      });
    })
    .post(function(req, res) {
      addClassroom(req.body, function(err, classroom) {
        if (type(err) == type.null)
          return res.status(201).json(classroom);
        else
          return res.status(500).json(err);
      });
    });

  router.route('/classroom/:id')
    .get(function(req, res) {
      withClassroom(req.params.id, function(err, classroom) {
        if (type(classroom) == type.undefined)
          res.status(404).end();
        else if (type(err) == type.null)
          res.json(classroom);
        else
          res.status(500).json(err);
      });
    })
    .put(function(req, res) {
      withClassroom(req.params.id, function(err, classroom) {
        if (type(classroom) == type.undefined)
          return res.status(404).end();

        for (var prop in req.body)
          if (prop !== "devices")
            classroom[prop] = req.body[prop];

        classroom.save(function(err) {
          if (type(err) == type.null)
            res.status(200).end();
          else
            res.status(500).json(err);
        });
      });
    })
    .delete(function(req, res) {
      deleteClassroom(req.params.id, function(err, numRemoved) {
        if (type(err) == type.null)
          res.status(500).json(err);
        else if (numRemoved === 0)
          res.status(404).end();
        else
          res.status(204).end();
      });
    });

  router.route('/classroom/:id/device')
    .get(function(req, res) {
      withClassroom(req.params.id, function(err, classroom) {
        if (type(classroom) == type.undefined)
          res.status(404).end();
        else if (type(err) == type.null)
          res.json(classroom.devices);
        else
          res.status(500).json(err);
      });
    })
    .post(function(req, res) {
      withClassroom(req.params.id, function(err, classroom) {
        var device = classroom.addDevice(req.body);
        classroom.save(function(err, classroom) {
          if (type(err) == type.null)
            res.status(201).json(device);
          else
            res.status(500).json(err);
        });
      });
    });

  router.route('/classroom/:id/device/:deviceid')
    .get(function(req, res) {
      withClassroom(req.params.id, function(err, classroom) {
        if (type(classroom) == type.undefined)
          return res.status(404).end();
        var device = classroom.getDevice(req.params.deviceid);
        if (type(device) != type.undefined)
          res.json(device);
        else
          res.status(404).end();
      });
    })
    .put(function(req, res) {
      withClassroom(req.params.id, function(err, classroom) {
        if (type(classroom) == type.undefined)
          return res.status(404).end();

        var device = classroom.getDevice(req.params.deviceid, req.body);

        classroom.save(function (err, classroom) {
          if (type(err) == type.null)
            res.status(200).end();
          else
            res.status(500).json(err);
        });
      });
    }).delete(function(req, res) {
      withClassroom(req.params.id, function(err, classroom) {
        if (type(classroom) == type.undefined)
          return res.status(404).end();

        classroom.deleteDevice(req.params.deviceid);

        classroom.save(function (err, classroom) {
          if (type(err) == type.null)
            res.status(200);
          else
            res.status(500).json(err);
        });
      });
    });

  http.get('/', express.static(path.resolve(__dirname, 'client')));
  http.use('/', express.static(path.resolve(__dirname)));

  var init = function(port) {
    http.listen(port);
  };

  module.exports.init = init;
}());
