function DiffableStateFactory(root, prop, data) {

  if (root === null)
    root = DiffableStateFactory({}, null, null);

  function State(newVal) {
    if (!State.$$patched) {
      State.$$root.$$diff[State.$$prop] = State.$$data;
      State.$$root.$$propegateDiff();
    }

    if (arguments.length === 0) {
      var merge = {};
      for (var _prop in State.$$data) {
        if (typeof State.$$root.$$patch[prop] !== 'undefined' && _prop in State.$$root.$$patch[prop])
          merge[_prop] = State.$$root.$$patch[prop][_prop];
        else
          merge[_prop] = State.$$data[_prop];
      }
      return merge;
    }

    // else if arguments.length !== 0
    State.$$patched = true;
    State.$$root.$$propegatePatch();

    State.$$root[State.$$prop] = DiffableStateFactory(State.$$root, State.$$prop, newVal);
    State.$$root[State.$$prop].$$patched = true;
    return (State.$$root.$$patch[State.$$prop] = newVal);
  }

  State.$$root = root;
  State.$$prop = prop;
  State.$$data = data;

  State.$$diff = {};
  State.$$patch = {};
  State.$$patched = false;

  State.$$propegateDiff = function() {
      if (State.$$prop !== null) {
        State.$$root.$$diff[State.$$prop] = State.$$diff;
        State.$$root.$$propegateDiff();
      }
  };

  State.$$propegatePatch = function() {
    if (State.$$prop !== null) {
      State.$$root.$$patch[State.$$prop] = State.$$patch;
      State.$$root.$$propegatePatch();
    }
  };

  State.$$branch = function() {
    return DiffableStateFactory(null, 'root', State.$$data);
  };

  State.$$merge = function(toMerge) {

  };

  State.$$undo = function(merged) {

  };

  if (typeof data === "object")
    for (var _prop in data)
      if (data.hasOwnProperty(_prop))
        State[_prop] = DiffableStateFactory(State, _prop, data[_prop]);

  return State;
}

function SharedTransactionalMemory(data, conn) {
  this.data = data;
}

SharedTransactionalMemory.prototype.sync = function(timeout) {

};
