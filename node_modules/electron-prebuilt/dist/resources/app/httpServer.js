(function() {

  var fs = require('fs');
  var path = require('path');

  var db = global.db,
    schema = require('./schema').def;

  var express = require('express'),
    http = express();

  var bodyParser = require('body-parser');
  http.use(bodyParser.urlencoded({'extended': true}));
  http.use(bodyParser.json());

  http.disable('etag');

  http.get('/*', function(req, res, next) {
    res.setHeader('Last-Modified', (new Date()).toUTCString());
    next();
  });

  var v = new(require('jsonschema').Validator)();
  for (var s in schema)
    v.addSchema(schema[s], schema[s].id);

  function validElseErr(object, schema, res) {
    var valid = v.validate(object, schema);
    if (valid.errors.length === 0)
      return true;
    else
      return res.status(400).json({'error': valid.errors}), false;
  }

  var router = express.Router();
  http.use('/api', router);

  router.route('/apps')
    .get(function(req, res) {
      fs.readdir(path.resolve(__dirname, 'apps'), function(err, files) {
        res.json(
          files
            .filter(function(maybeDir) {
              return fs.statSync(path.resolve(__dirname, 'apps', maybeDir)).isDirectory();
            })
            .map(function(dir) {
              var toReturn = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'apps', dir, 'package.json')));
              toReturn.path = dir;
              return toReturn;
            })
        );
      });
    });

  router.route('/classroom')
    .get(function(req, res) {
      db.find({}, function(err, docs) {
        res.json(docs.map(function(doc) {
          return {
            '_id': doc._id,
            'name': doc.name,
            'connectedDevices': typeof doc.devices !== 'undefined' ?
              doc.devices.filter(function(dev) {
                return dev.connected;
              }).length : 0
          };
        }));
      });
    })
    .post(function(req, res) {
      if (validElseErr(req.body, '/classroom', res))
        req.body.devices = undefined;
        db.insert(req.body, function(err, docs) {
          res.status(201).json(docs);
        });
    });

  router.route('/classroom/:id')
    .get(function(req, res) {
      db.find({'_id': req.params.id}, function(err, docs) {
        if (docs.length === 0)
          res.status(404).end();
        else
          res.json(docs[0]);
      });
    })
    .put(function(req, res) {
      db.find({_id: req.params.id}, function(err, docs) {
        if (docs.length === 0)
          return res.status(404).end();

        var doc = docs[0];
        for (var prop in req.body)
          if (prop !== "devices")
            doc[prop] = req.body[prop];

        if (validElseErr(doc, '/classroom', res))
          db.update({'_id': req.params.id}, {'$set': req.body}, {}, function(err, numReplaced, docs) {
            res.status(200).end();
          });
      });
    })
    .delete(function(req, res) {
      db.remove({'_id': req.params.id}, function(err, numRemoved) {
        if (numRemoved > 0)
          res.status(204).end();
        else
          res.status(404).end();
      });
    });

  router.route('/classroom/:id/device')
    .get(function(req, res) {
      db.find({'_id': req.params.id}, function(err, docs) {
        if (docs.length === 0)
          res.status(404).end();
        else
          res.json(docs[0].devices);
      });
    })
    .post(function(req, res) {
      db.find({_id: req.params.id}, function(err, docs) {
        if (docs.length === 0)
          return res.status(404).end();

        var doc = docs[0];
        if (typeof doc.deviceIndex === 'undefined')
          doc.deviceIndex = 0;
        req.body._id = doc.deviceIndex++;
        doc.devices.push(req.body);

        if (validElseErr(doc, '/classroom', res))
          db.update({'_id': req.params.id}, {'$set': doc}, {}, function(err, numReplaced, docs) {
            res.json(doc.devices.slice(-1)[0]);
          });
      });
    });

  router.route('/classroom/:id/device/:deviceid')
    .get(function(req, res) {
      db.find({'_id': req.params.id}, function(err, docs) {
        if (docs.length === 0)
          res.status(404).end();
        else
          res.json(docs[0].devices[docs[0].devices.map(function(device) { return device._id; }).indexOf(parseInt(req.params.deviceid))]);
      });
    })
    .put(function(req, res) {
      db.find({_id: req.params.id}, function(err, docs) {
        if (docs.length === 0)
          return res.status(404).end();

        var device = docs[0].devices[docs[0].devices.map(function(device) { return device._id; }).indexOf(parseInt(req.params.deviceid))];
        for (var prop in req.body)
          if (prop !== "_id")
            device[prop] = req.body[prop];

        docs[0].devices[docs[0].devices.map(function(device) { return device._id; }).indexOf(parseInt(req.params.deviceid))] = device;

        if (validElseErr(docs[0], '/classroom', res))
          db.update({'_id': req.params.id}, {'$set': docs[0]}, {}, function(err, numReplaced, docs) {
            res.status(200).end();
          });
      });
    }).delete(function(req, res) {
        db.find({_id: req.params.id}, function(err, docs) {
          if (docs.length === 0)
            return res.status(404).end();

          docs[0].devices.splice(docs[0].devices.map(function(device) { return device._id; }).indexOf(parseInt(req.params.deviceid)), 1);

          if (validElseErr(docs[0], '/classroom', res))
            db.update({'_id': req.params.id}, {'$set': docs[0]}, {}, function(err, numReplaced, docs) {
              res.status(200).end();
            });
        });
      });

  http.get('/', express.static(path.resolve(__dirname, 'client')));
  http.use('/', express.static(path.resolve(__dirname)));

  var init = function(port) {
    http.listen(port);
  };

  module.exports.init = init;
}());
