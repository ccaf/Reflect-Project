var app = require('app');

var BrowserWindow = require('browser-window'),
  mainWindow = null;

var fs = require('fs');
var path = require('path');

var db;

db = fs.existsSync(path.resolve(__dirname, 'embedded.db')) ? JSON.parse(fs.readFileSync(path.resolve(__dirname, 'embedded.db'))) : {};

function saveDB() {
  fs.writeFileSync(path.resolve(__dirname, 'embedded.db'), JSON.stringify(db));
}

var dbInterval = setInterval(saveDB, 60 * 1000);

// some defaults
if (typeof db.config !== 'object' || db.config === null)
  db.config = {};

if (typeof db.config.ports !== 'object' || db.config.ports === null)
  db.config.ports = {'http': 1867, 'ws': 904};

if (typeof db.classrooms !== 'object' || db.classrooms === null)
    db.classrooms = [];

// models
function Classroom(args) {
  this.name = args.name || 'New classroom ' + (db.classrooms.length + 1);
  this.devices = args.devices || [];
  this.appRoot = args.appRoot || {};
}

function Device(args) {
  this.name = args.name || 'New device';
  this.color = args.color || 'green';
  this.screen = {
    'height': 'screen' in args ? args.screen.height || 1 : 1,
    'width': 'screen' in args ? args.screen.width || 1 : 1
  };
  this.location = {
    'x': 'location' in args ? args.location.x || 0 : 0,
    'y': 'location' in args ? args.location.y || 0 : 0,
    'angle': 'location' in args ? args.location.angle || 0 : 0
  };
}

var assoc = {};
var checkerboard = new (require('checkerboard')).Server(db.config.ports.ws, db);

checkerboard.on('open', function(conn, message) {
  assoc[conn.uuid] = {'classroom': undefined, 'device': undefined};
  conn.state = function(state) {
    var toReturn = {'classrooms': []};

    db.classrooms.forEach(function(classroom, index) {
      toReturn.classrooms[index]= {'name': classroom.name, 'devices': classroom.devices};
    });

    return toReturn;
  };
});

checkerboard.on('data-associate', function(conn, message) {
  assoc[conn.uuid] = {'classroom': message.classroom, 'device': message.device};
  conn.state = function(state) {
    var classroom = state.classrooms[message.classroom];
    classroom.devices.forEach(function(device) {
      if (typeof device.app !== 'undefined' && !(device.app in classroom.appRoot))
        classroom.appRoot[device.app] = {};
    });
    return classroom;
  };
  conn.overwriteState();
});

var express = require('express'),
    http = express();

// Set Last-Modified to avoid 304 Not Modified statuses
http.get('/*', function(req, res, next) {
  res.setHeader('Last-Modified', (new Date()).toUTCString());
  next();
});

http.get('/', express.static(path.resolve(__dirname, 'client')));
http.use('/', express.static(path.resolve(__dirname)));

http.listen(db.config.ports.http);

app.on('ready', function() {
  mainWindow = new BrowserWindow({width: 800, height: 600});
  mainWindow.loadUrl('file://' + __dirname + '/admin/shell.html?' + db.config.ports.http);

  mainWindow.on('closed', function() {
    mainWindow = null;
  });
});

app.on('window-all-closed', function() {
  clearInterval(dbInterval);
  saveDB();
  app.quit();
});
