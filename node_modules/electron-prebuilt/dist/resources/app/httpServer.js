(function() {

  var db = global.db, schema = require('./schema').def;

  var express = require('express'),
    http = express();

  var bodyParser = require('body-parser');
    http.use(bodyParser.urlencoded({ extended: true }));
    http.use(bodyParser.json());

  var v = new (require('jsonschema').Validator)();
    for (var s in schema)
      v.addSchema(schema[s], schema[s].id);

    function validElseErr (object, schema, res) {
      var valid = v.validate(object, schema);
      if (valid.errors.length === 0)
        return true;
      else
        return res.status(400).json({'error': valid.errors}), false;
    }


  http.get('/', express.static(__dirname + '/client'));
  http.use('/', express.static(__dirname));

  var router = express.Router();
  http.use('/api', router);

  router.route('/classroom')
    .get(function (req, res) {
      db.find({}, function(err, docs) {
        res.json(docs.map(function(doc) {
          return {
            '_id': doc._id,
            'name': doc.name,
            'connectedDevices':
              typeof doc.devices !== 'undefined' ?
                doc.devices.filter(function(dev) { return dev.connected; }).length : 0
          };
        }));
      });
    })
    .post(function (req, res) {
      if(validElseErr(req.body, '/classroom', res))
        db.insert(req.body, function(err, docs) {
          res.status(201).json(docs);
        });
    });

  router.route('/classroom/:id')
    .get(function(req, res) {
      db.find({'_id': req.params.id}, function(err, docs) {
        if (docs.length === 0)
          res.status(404).end();
        else
          res.json(docs);
      });
    })
    .put(function(req, res) {
      db.find({_id: req.params.id}, function(err, docs) {
        if (docs.length === 0)
          return res.status(404).end;

        doc = docs[0];
        for (var prop in req.body)
          doc[prop] = req.body[prop];

        if (validElseErr(doc, '/classroom', res))
          db.update({'_id': req.params.id}, {'$set': req.body}, {}, function (err, numReplaced, docs) {
            res.json(docs);
          });
      });
    })
    .delete(function(req, res) {
      db.remove({'_id': req.params.id}, function(err, numRemoved) {
        if (numRemoved > 0)
          res.status(204).end();
        else
          res.status(404).end();
      });
    });

  var init = function(port) {
    http.listen(port);
  };

  module.exports.init = init;
}());
